// Generate Android assets from all slices in current page (cmd alt a)
// Assumes pixel count in Sketch is xhdpi, so 1dp=2px
// Saves off all assets to path to current document + drawable-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}

var library = {}
library.sandbox = {
    // Utility: display a modal with message
    debug: function(message) {
        var app = [NSApplication sharedApplication];
        [app displayDialog:message withTitle:"Message"];
    },
    // each-like iterator for Obj-C types
    forEachObj: function(array, callback) {
        var count = [array count];
        for (var i = 0; i < count; i++) {
            var el = [array objectAtIndex: i];
            callback(el);
        }
    },
    openInFinder: function(path) {
        var finder_task = [[NSTask alloc] init],
        open_finder_args = [NSArray arrayWithObjects:"-R", path, nil];

        [finder_task setLaunchPath:"/usr/bin/open"];
        [finder_task setArguments:open_finder_args];
        [finder_task launch];
    },
    configFileName: ".android_assets",
    getDocumentConfigFilePath: function(documentUrl) {
        var localConfigFile = [[documentUrl URLByDeletingLastPathComponent] URLByAppendingPathComponent: library.sandbox.configFileName];
        return localConfigFile;
    },
    findConfigFile: function(documentUrl) {
        var fileManager = [NSFileManager defaultManager];
        var configFileName = library.sandbox.configFileName;

        var localConfigFile = library.sandbox.getDocumentConfigFilePath(documentUrl);

        var userConfigFilePath = [NSString stringWithString:"~/" + configFileName];
        var userConfigFile = [userConfigFilePath stringByExpandingTildeInPath];


        if ([fileManager fileExistsAtPath:[localConfigFile path]]) {
            return localConfigFile;
        }

        if ([fileManager fileExistsAtPath:userConfigFile]) {
            return userConfigFile;
        }
    },
    determineBaseDensity: function(documentUrl) {
        var configFile = this.findConfigFile(documentUrl);
        if (configFile == null) {
            log("No config file found");
        } else {
            var fileManager = [NSFileManager defaultManager];
            var fileContents = [NSString stringWithContentsOfFile:configFile];

            if (fileContents != null) {
                if (hit = fileContents.match(/^base_density:([a-z]*)/)) {
                    var density = hit[1];
                    log("Found base density: " + density + ", returning");
                    return density;
                } else {
                    log("Found config file, but no base_density specified in it");
                }
            } else {
                log("fileContents is null!");
            }
        }
        log("Returning default base density");
        return null;
    },
    getDensityFactors: function(baseDensityName) {
        log("Looking for factor " + baseDensityName);
        var factors = {
            "mdpi":0.5,
            "hdpi": 0.75,
            "xhdpi": 1,
            "xxhdpi": 1.5,
            "xxxhdpi": 2};
        var baseDensityFactor = factors[baseDensityName];
        var result = {};
        for (var key in factors) {
            result[key] = factors[key] / baseDensityFactor;
        }
        return result;
    }
}

function main() {
    var fileUrl = [doc fileURL];
    if (fileUrl == null) {
        alert("You need to save your document for me to know where to save it");
        return;
    }


    var density = library.sandbox.determineBaseDensity([doc fileURL]);
    if (density == null) {
        density = askForDefaultDensity();
        var _contents = "base_density:"+density+"\n";
        var err;
        var contents = [NSString stringWithString:_contents];

        var path = library.sandbox.getDocumentConfigFilePath([doc fileURL]);
        log("Will save config file into " + path);
        var result = [contents writeToURL:path atomically:true];
        log("Result is " + result);
    }

    var factors = library.sandbox.getDensityFactors(density);

    var base_dir = get_dir_from_prompt(get_cwd());
    if (base_dir == null) {
        alert("Not saving any assets");
        return;
    }
    
    //for asking if its icon or normal drawable
    var iconOrDrawable = askForIconOrDrawable();

    //process the selected slices
    var slicesToOutput = selection;
    library.sandbox.forEachObj(slicesToOutput, function(slice) {
        process_slice(slice, doc, base_dir, factors,iconOrDrawable);
    });
    
    if(iconOrDrawable == "Icon")
            library.sandbox.openInFinder(base_dir + "/mipmap-hdpi");
    else
            library.sandbox.openInFinder(base_dir + "/drawable-hdpi");
}


function askForIconOrDrawable() {
    var selectedItemIndex = 1;
    var items = ["Icon","Drawable"];

    var accContainer = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,25)];

    var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)];
    [accessory addItemsWithObjectValues:items];
    [accessory selectItemAtIndex:selectedItemIndex];

    [accContainer addSubview:accessory];

    var alert = [[NSAlert alloc] init];
    [alert setMessageText:"Is it MipMap or Drawable ?"];
    [alert addButtonWithTitle:'OK']
    [alert addButtonWithTitle:'Cancel']
    [alert setAccessoryView:accContainer]


    var responseCode = [alert runModal]
    var sel = [accessory indexOfSelectedItem]

    var result = items[sel];
//    [doc showMessage:"Here: " + result];
    return result;
}

function alert(msg) {
    var app = [NSApplication sharedApplication];
    [app displayDialog:msg withTitle:"Hey"];
}

// Return current working directory
// This works better for the designer's workflow, as they mostly want to
// save assets in the current directory
function get_cwd() {
    var file_url = [doc fileURL],
    file_path = [file_url path],
    base_dir = file_path.split([doc displayName])[0];
    return base_dir;
}

// Let the user specify a directory
function get_dir_from_prompt() {
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"Where do you want to place your assets?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories: true];
    var default_dir = [[doc fileURL] URLByDeletingLastPathComponent];
    [panel setDirectoryURL:default_dir];

    if ([panel runModal] == NSOKButton) {
        var message = [panel filename];
        return message;
    }
}

function askForDefaultDensity() {
    var selectedItemIndex = 0;
    var items = ["mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi"];

    var accContainer = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,25)];

    var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)];
    [accessory addItemsWithObjectValues:items];
    [accessory selectItemAtIndex:selectedItemIndex];

    [accContainer addSubview:accessory];

    var alert = [[NSAlert alloc] init];
    [alert setMessageText:"What should be the base density for this Sketch documentâ‰ˆ?"];
    [alert addButtonWithTitle:'OK']
    [alert addButtonWithTitle:'Cancel']
    [alert setAccessoryView:accContainer]


    var responseCode = [alert runModal]
    var sel = [accessory indexOfSelectedItem]

    var result = items[sel];
//    [doc showMessage:"Here: " + result];
    return result;
}

function santize(fileName) {
    return fileName.replace(/[^\w\d]/g, '_').toLowerCase();
}

function process_slice(slice, doc, base_dir, factors,isIconOrDrawable) {
    log("Will process slices");
    var frame = [slice frame];
    var slice_name = [slice name];

    for (var name in factors) {
        var factor = factors[name];
        log("Processing " + slice_name + " " + name + " (" + factor + ")");
        var version = copy_layer_with_factor(slice, factor);
        var file_name_Drawable = base_dir + "/drawable-" + name + "/" + santize(slice_name) + ".png";
        var file_name_Icon = base_dir + "/mipmap-" + name + "/" + santize(slice_name) + ".png";
        if(isIconOrDrawable == "Icon"){
            [doc saveArtboardOrSlice: version toFile:file_name_Icon];
        }else{
            [doc saveArtboardOrSlice: version toFile:file_name_Drawable];
        }
        
        log("Saved ");
    }
}

function copy_layer_with_factor(original_slice, factor) {
    var copy = [original_slice duplicate];
    var rect = copy.className() == "MSArtboardGroup" ? rect = copy.absoluteRect().rect() : copy.absoluteInfluenceRect()
    var request = MSExportRequest.new();
    request.rect = rect;
    request.scale = factor;
    [copy removeFromParent];
    return request;
}

main();
